To create migration tasks for all SQL schemas that currently exist in the project, you'll first need to identify all the tables and schemas you've designed so far. From the project structure and previous discussions, I understand you have tables like `skills`, `players`, `items`, and possibly others.

Here's the process for generating migration tasks for all existing SQL schemas:

### 1. **Set Up the Migrations Folder**

First, ensure you have a `migrations` folder at the root of your project (if it doesn't exist yet). This is where the SQL migration files will be stored.

If the folder doesn't exist, create it:

```bash
mkdir migrations
```

### 2. **Generate Migration Tasks Using SQLx**

You can create the migration tasks using the SQLx CLI.

Run the following commands to generate migration files for each table:

```bash
sqlx migrate add create_skills_table
sqlx migrate add create_items_table
sqlx migrate add create_players_table
sqlx migrate add create_pets_table
sqlx migrate add create_minions_table
```

Each command will generate a new file in the `migrations` folder. For example:

```
migrations/
  └── 20230415123000_create_skills_table.sql
  └── 20230415123500_create_items_table.sql
  └── 20230415124000_create_players_table.sql
  └── 20230415124500_create_pets_table.sql
  └── 20230415125000_create_minions_table.sql
```

### 3. **Edit the Migration Files**

For each migration file, you'll add the SQL schema to create the corresponding tables. Here's an example of how you could define the SQL schemas for each table:

#### **Create `skills` Table (`create_skills_table.sql`)**

```sql
-- 20230415123000_create_skills_table.sql

CREATE TABLE skills (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    skill_type VARCHAR(50),
    power INT,
    cooldown INT,
    mana_cost INT,
    target_type VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### **Create `items` Table (`create_items_table.sql`)**

```sql
-- 20230415123500_create_items_table.sql

CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    durability INT DEFAULT 100,
    is_magical BOOLEAN DEFAULT FALSE,
    is_cursed BOOLEAN DEFAULT FALSE,
    item_type VARCHAR(50),
    power INT,
    value INT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### **Create `players` Table (`create_players_table.sql`)**

```sql
-- 20230415124000_create_players_table.sql

CREATE TABLE players (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    level INT DEFAULT 1,
    experience INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### **Create `pets` Table (`create_pets_table.sql`)**

```sql
-- 20230415124500_create_pets_table.sql

CREATE TABLE pets (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    owner_id INT REFERENCES players(id),
    pet_type VARCHAR(50),
    health INT,
    power INT,
    abilities TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### **Create `minions` Table (`create_minions_table.sql`)**

```sql
-- 20230415125000_create_minions_table.sql

CREATE TABLE minions (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    owner_id INT REFERENCES players(id),
    minion_type VARCHAR(50),
    health INT,
    power INT,
    abilities TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

### 4. **Run the Migrations**

Once you've edited all the migration files, apply them to the database. Run the following command:

```bash
sqlx migrate run
```

This will apply all pending migrations and create the tables in your database.

### 5. **Automate Migrations on Startup (Optional)**

To automatically apply migrations every time the backend service starts, you can integrate the migration logic into your `main.rs`, like this:

```rust
use sqlx::PgPool;
use sqlx::migrate::Migrator;
use std::env;

#[tokio::main]
async fn main() {
    dotenv().ok();

    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    let pool = PgPool::connect(&database_url)
        .await
        .expect("Failed to connect to the database");

    // Apply migrations automatically on startup
    let migrator = Migrator::new(std::path::Path::new("migrations")).await.unwrap();
    migrator.run(&pool).await.unwrap();

    println!("Migrations applied successfully");

    // Continue with the rest of your app initialization...
}
```

### 6. **Version Control the Migrations**

Ensure that your migration files are version-controlled with Git. This allows you to track changes to the database schema and ensures that everyone on your team is using the same schema version.

Add the `migrations` folder to your Git repository:

```bash
git add migrations/
git commit -m "Add initial database migrations"
git push
```

### Summary of the Migration Files

Here’s a recap of the migration files:

1. `create_skills_table.sql` – Defines the `skills` table.
2. `create_items_table.sql` – Defines the `items` table with properties like `durability`, `is_magical`, and `is_cursed`.
3. `create_players_table.sql` – Defines the `players` table.
4. `create_pets_table.sql` – Defines the `pets` table.
5. `create_minions_table.sql` – Defines the `minions` table.

Each of these files will automatically create the tables you need in your database. You can also edit these files in the future to make schema updates, which will help you track and maintain the database schema as the project evolves.

Let me know if you need help with any part of the migration process!
